//
// Generated file, do not edit! Created by nedtool 5.6 from application/EthernetFrame.msg.
//

#ifndef __IEEE_802_1_QCI_ETHERNETFRAME_M_H
#define __IEEE_802_1_QCI_ETHERNETFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace ieee_802_1_qci {

/**
 * Class generated from <tt>application/EthernetFrame.msg:18</tt> by nedtool.
 * <pre>
 * packet EthernetFrame
 * {
 *     string src; // source mac addr
 *     string dst; // destination mac addr
 *     int streamId;
 *     int streamHandle;
 *     uint8_t priority; // 3 bits
 *     //    uint8_t color; // 8 bits
 *     string payload;
 * }
 * </pre>
 */
class EthernetFrame : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string src;
    ::omnetpp::opp_string dst;
    int streamId;
    int streamHandle;
    uint8_t priority;
    ::omnetpp::opp_string payload;

  private:
    void copy(const EthernetFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetFrame&);

  public:
    EthernetFrame(const char *name=nullptr, short kind=0);
    EthernetFrame(const EthernetFrame& other);
    virtual ~EthernetFrame();
    EthernetFrame& operator=(const EthernetFrame& other);
    virtual EthernetFrame *dup() const override {return new EthernetFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);
    virtual const char * getDst() const;
    virtual void setDst(const char * dst);
    virtual int getStreamId() const;
    virtual void setStreamId(int streamId);
    virtual int getStreamHandle() const;
    virtual void setStreamHandle(int streamHandle);
    virtual uint8_t getPriority() const;
    virtual void setPriority(uint8_t priority);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFrame& obj) {obj.parsimUnpack(b);}

} // namespace ieee_802_1_qci

#endif // ifndef __IEEE_802_1_QCI_ETHERNETFRAME_M_H

